<?xml version="1.0" encoding="UTF-8"?>
<test-set xmlns:xs="http://www.w3.org/2001/XMLSchema"
          xmlns="http://www.w3.org/2012/10/xslt-test-catalog"
          name="stream">
   <description>Tests the xsl:stream instruction introduced in XSLT 3.0.</description>
   
   <dependencies>
      <spec value="XSLT30+"/>
      <feature value="streaming"/>
   </dependencies>
   
   <test-case name="stream-apply-001">
      <description>Test of xsl:stream instruction with xsl:apply-templates, 
      	navigating to attributes and ancestors. 
      	From a Saxon bug report by Roger Costello.</description>
      <created by="Michael Kay" on="2013-10-31"/>  
      <test>
         <stylesheet file="stream-apply-001.xsl"/>
         <initial-template name="main"/>
      </test>
      <result>
         <all-of>
         	<assert>/Results/CATEGORIES/CATEGORY[1]/Attributes[Name='CODE' and Value='P' and Name='DESC' and Value='Paperback']</assert>
         	<assert>/Results/CATEGORIES/CATEGORY[1]/Ancestors[
         			*[1][self::Name][.='BOOKLIST'] and 
         			*[2][self::Attributes[not(*)]] and 
         			*[3][self::Name][.='CATEGORIES'] and
         			*[4][self::Attributes[Name='DESC' and Value='Miscellaneous categories']]]</assert>
            <assert>count(/Results/CATEGORIES/CATEGORY) = 3</assert>			
         </all-of>
      </result>
   </test-case>
   
   <test-case name="stream-apply-002">
      <description>Test of xsl:stream instruction with xsl:apply-templates, 
      	itself appearing within a streamable template.
      	From a Saxon bug report by Roger Costello.</description>
      <created by="Michael Kay" on="2013-11-04"/>
      <environment>
        <source role="." streaming="true">
            <content><![CDATA[<doc/>]]></content>
         </source>
      </environment>
      <test>
         <stylesheet file="stream-apply-002.xsl"/>
      </test>
      <result>
         <all-of>
         	<assert>/Results/CATEGORIES/CATEGORY[1]/Attributes[Name='CODE' and Value='P' and Name='DESC' and Value='Paperback']</assert>
         	<assert>/Results/CATEGORIES/CATEGORY[1]/Ancestors[
         			*[1][self::Name][.='BOOKLIST'] and 
         			*[2][self::Attributes[not(*)]] and 
         			*[3][self::Name][.='CATEGORIES'] and
         			*[4][self::Attributes[Name='DESC' and Value='Miscellaneous categories']]]</assert>
            <assert>count(/Results/CATEGORIES/CATEGORY) = 3</assert>			
         </all-of>
      </result>
   </test-case>

   <test-case name="stream-agg-001">
      <description>Basic Test of xsl:stream instruction with count().</description>
      <created by="Michael Kay" on="2012-11-07"/>
      <test>
         <stylesheet file="stream-agg-001.xsl"/>
         <initial-template name="main"/>
      </test>
      <result>
         <assert-xml><![CDATA[<out>6</out>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="stream-agg-002">
      <description>Basic Test of xsl:stream instruction with count(), filtered with motionless predicate</description>
      <created by="Michael Kay" on="2012-11-07"/>
      <test>
         <stylesheet file="stream-agg-002.xsl"/>
         <initial-template name="main"/>
      </test>
      <result>
         <assert-xml><![CDATA[<out>4</out>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="stream-agg-003">
      <description>Basic Test of xsl:stream instruction with sum()</description>
      <created by="Michael Kay" on="2012-11-07"/>
      <test>
         <stylesheet file="stream-agg-003.xsl"/>
         <initial-template name="main"/>
      </test>
      <result>
         <assert-xml><![CDATA[<out>54.37</out>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="stream-agg-004">
      <description>Basic Test of xsl:stream instruction with sum(), filtered with a motionless predicate</description>
      <created by="Michael Kay" on="2012-11-07"/>
      <test>
         <stylesheet file="stream-agg-004.xsl"/>
         <initial-template name="main"/>
      </test>
      <result>
         <assert-xml><![CDATA[<out>32.95</out>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="stream-agg-005">
      <description>Basic Test of xsl:stream instruction with sum(), filtered with a positional predicate</description>
      <created by="Michael Kay" on="2012-11-07"/>
      <test>
         <stylesheet file="stream-agg-005.xsl"/>
         <initial-template name="main"/>
      </test>
      <result>
         <assert-xml><![CDATA[<out>16.48</out>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="stream-agg-006">
      <description>Test of xsl:stream instruction with sum(), filtered with a positional predicate</description>
      <created by="Michael Kay" on="2012-11-07"/>
      <test>
         <stylesheet file="stream-agg-006.xsl"/>
         <initial-template name="main"/>
      </test>
      <result>
         <assert-xml><![CDATA[<out>16.48</out>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="stream-agg-007">
      <description>Test of xsl:stream instruction with sum(), filtered with a positional predicate</description>
      <created by="Michael Kay" on="2012-11-07"/>
      <test>
         <stylesheet file="stream-agg-007.xsl"/>
         <initial-template name="main"/>
      </test>
      <result>
         <assert-xml><![CDATA[<out>16.48</out>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="stream-agg-008">
      <description>Test of xsl:stream instruction with avg(), filtered with two boolean predicates</description>
      <created by="Michael Kay" on="2012-11-07"/>
      <test>
         <stylesheet file="stream-agg-008.xsl"/>
         <initial-template name="main"/>
      </test>
      <result>
         <assert-xml><![CDATA[<out>420</out>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="stream-agg-009">
      <description>Test of xsl:stream instruction with min(), applied to an attribute</description>
      <created by="Michael Kay" on="2012-11-07"/>
      <test>
         <stylesheet file="stream-agg-009.xsl"/>
         <initial-template name="main"/>
      </test>
      <result>
         <assert-xml><![CDATA[<out>-7.5</out>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="stream-agg-010">
      <description>Test of xsl:stream instruction with max(), applied to an attribute, filtered</description>
      <created by="Michael Kay" on="2012-11-07"/>
      <test>
         <stylesheet file="stream-agg-010.xsl"/>
         <initial-template name="main"/>
      </test>
      <result>
         <assert-xml><![CDATA[<out>49863</out>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="stream-agg-011">
      <description>Test of xsl:stream instruction with distinct-values(), applied to an attribute</description>
      <created by="Michael Kay" on="2012-11-07"/>
      <test>
         <stylesheet file="stream-agg-011.xsl"/>
         <initial-template name="main"/>
      </test>
      <result>
         <assert-xml><![CDATA[<out>49863</out>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="stream-agg-012">
      <description>Test of xsl:stream instruction with exists(), applied to a non-existent element</description>
      <created by="Michael Kay" on="2012-11-07"/>
      <test>
         <stylesheet file="stream-agg-012.xsl"/>
         <initial-template name="main"/>
      </test>
      <result>
         <assert-xml><![CDATA[<out>false</out>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="stream-agg-013">
      <description>Test of xsl:stream instruction with exists(), applied to an existent element (can exit early...)</description>
      <created by="Michael Kay" on="2012-11-07"/>
      <test>
         <stylesheet file="stream-agg-013.xsl"/>
         <initial-template name="main"/>
      </test>
      <result>
         <assert-xml><![CDATA[<out>true</out>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="stream-agg-014">
      <description>Test of xsl:stream instruction with empty(), applied with a boolean filter</description>
      <created by="Michael Kay" on="2012-11-07"/>
      <test>
         <stylesheet file="stream-agg-014.xsl"/>
         <initial-template name="main"/>
      </test>
      <result>
         <assert-xml><![CDATA[<out>true</out>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="stream-agg-015">
      <description>Test of xsl:stream instruction with empty(), applied with both a positional and a boolean filter</description>
      <created by="Michael Kay" on="2012-11-07"/>
      <test>
         <stylesheet file="stream-agg-015.xsl"/>
         <initial-template name="main"/>
      </test>
      <result>
         <assert-xml><![CDATA[<out>true</out>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="stream-agg-016">
      <description>Test of xsl:stream instruction with sum() of a computed value</description>
      <created by="Michael Kay" on="2012-11-07"/>
      <test>
         <stylesheet file="stream-agg-016.xsl"/>
         <initial-template name="main"/>
      </test>
      <result>
         <assert-xml><![CDATA[<out>1491746</out>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="stream-agg-017">
      <description>Test of xsl:stream instruction with max() of a conditional value</description>
      <created by="Michael Kay" on="2012-11-07"/>
      <test>
         <stylesheet file="stream-agg-017.xsl"/>
         <initial-template name="main"/>
      </test>
      <result>
         <assert-xml><![CDATA[<out>23.5</out>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="stream-agg-018">
      <description>Test of xsl:stream instruction with a loop used to compute each item</description>
      <created by="Michael Kay" on="2012-11-07"/>
      <test>
         <stylesheet file="stream-agg-018.xsl"/>
         <initial-template name="main"/>
      </test>
      <result>
         <assert-xml><![CDATA[<out>112.5</out>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="stream-agg-019">
      <description>Test of xsl:stream instruction using //X/Y</description>
      <created by="Michael Kay" on="2012-11-07"/>
      <test>
         <stylesheet file="stream-agg-019.xsl"/>
         <initial-template name="main"/>
      </test>
      <result>
         <assert-xml><![CDATA[<out>112.5</out>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="stream-agg-020">
      <description>Test of xsl:stream instruction using string-join</description>
      <created by="Michael Kay" on="2012-11-07"/>
      <test>
         <stylesheet file="stream-agg-020.xsl"/>
         <initial-template name="main"/>
      </test>
      <result>
         <assert-xml><![CDATA[<out>Pride and Prejudice, Wuthering Heights, Tess of the d'Urbervilles, Jude the Obscure, The Big Over Easy, The Eyre Affair</out>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="stream-agg-021">
      <description>Test of xsl:stream instruction using codepoints-to-string</description>
      <created by="Michael Kay" on="2012-11-07"/>
      <test>
         <stylesheet file="stream-agg-021.xsl"/>
         <initial-template name="main"/>
      </test>
      <result>
         <assert-xml><![CDATA[<out>1/7./-</out>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="stream-agg-022">
      <description>Test of xsl:stream instruction with count(), filtered with non-motionless predicate.</description>
      <created by="Michael Kay" on="2012-11-07"/>
      <test>
         <stylesheet file="stream-agg-022.xsl"/>
         <initial-template name="main"/>
      </test>
      <result>
         <error code="XTSE3430"/>
      </result>
   </test-case>

   <test-case name="stream-agg-023">
      <description>Test of xsl:stream instruction with sum(), filtered with predicate that uses last().</description>
      <created by="Michael Kay" on="2012-11-07"/>
      <test>
         <stylesheet file="stream-agg-023.xsl"/>
         <initial-template name="main"/>
      </test>
      <result>
         <error code="XTSE3430"/>
      </result>
   </test-case>

   <test-case name="stream-agg-024">
      <description>Test of xsl:stream instruction with sum(), filtered with predicate that atomizes.</description>
      <created by="Michael Kay" on="2012-11-07"/>
      <test>
         <stylesheet file="stream-agg-024.xsl"/>
         <initial-template name="main"/>
      </test>
      <result>
         <error code="XTSE3430"/>
      </result>
   </test-case>

   <test-case name="stream-agg-025">
      <description>Test of xsl:stream instruction with empty(), applied with both a positional and a boolean filter, boolean first</description>
      <created by="Michael Kay" on="2012-11-07"/>
      <test>
         <stylesheet file="stream-agg-025.xsl"/>
         <initial-template name="main"/>
      </test>
      <result>
         <error code="XTSE3430"/>
      </result>
   </test-case>

   <test-case name="stream-agg-026">
      <description>Test of xsl:stream instruction calling a function. Not streamable.</description>
      <created by="Michael Kay" on="2012-11-07"/>
      <test>
         <stylesheet file="stream-agg-026.xsl"/>
         <initial-template name="main"/>
      </test>
      <result>
         <error code="XTSE3430"/>
      </result>
   </test-case>

   <test-case name="stream-agg-027">
      <description>Test of xsl:stream instruction calling a function. Not streamable.</description>
      <created by="Michael Kay" on="2012-11-07"/>
      <test>
         <stylesheet file="stream-agg-027.xsl"/>
         <initial-template name="main"/>
      </test>
      <result>
         <error code="XTSE3430"/>
      </result>
   </test-case>
   
   
   <test-case name="stream-choose-001">
      <description>Use xsl:choose within xsl:stream, both branches do downward selection</description>
      <created by="Michael Kay" on="2012-12-04"/>
      <test>
         <stylesheet file="stream-choose-001.xsl"/>
         <initial-template name="main"/>
      </test>
      <result>
         <assert-xml><![CDATA[<out><chapter><head>Heading</head><p>One</p><p>Two</p><p>Three</p
            ><bullet>point one</bullet><bullet>point two</bullet><bullet>point three</bullet
            ><p>Four</p></chapter></out>]]></assert-xml>
      </result>
   </test-case>
   
   <test-case name="stream-choose-002">
      <description>Use xsl:choose within an LRE within xsl:stream, both branches do downward selection</description>
      <created by="Michael Kay" on="2012-12-04"/>
      <test>
         <stylesheet file="stream-choose-002.xsl"/>
         <initial-template name="main"/>
      </test>
      <result>
         <assert-xml><![CDATA[<out><chapter><head>Heading</head><p>One</p><p>Two</p><p>Three</p
            ><bullet>point one</bullet><bullet>point two</bullet><bullet>point three</bullet
            ><p>Four</p></chapter></out>]]></assert-xml>
      </result>
   </test-case>
   
   <test-case name="stream-choose-003">
      <description>Use xsl:choose and LREs within xsl:stream, both branches do downward selection</description>
      <created by="Michael Kay" on="2012-12-04"/>
      <test>
         <stylesheet file="stream-choose-003.xsl"/>
         <initial-template name="main"/>
      </test>
      <result>
         <assert-xml><![CDATA[<out><in/><chapter><head>Heading</head><p>One</p><p>Two</p><p>Three</p
            ><bullet>point one</bullet><bullet>point two</bullet><bullet>point three</bullet
            ><p>Four</p></chapter><in/></out>]]></assert-xml>
      </result>
   </test-case>
   
   <test-case name="stream-choose-004">
      <description>Use xsl:choose and LREs within xsl:stream, both branches do downward selection</description>
      <created by="Michael Kay" on="2012-12-04"/>
      <test>
         <stylesheet file="stream-choose-004.xsl"/>
         <initial-template name="main"/>
      </test>
      <result>
         <assert-xml><![CDATA[<out><in/><chapter><head>Heading</head><p>One</p><p>Two</p><p>Three</p
            ><bullet>point one</bullet><bullet>point two</bullet><bullet>point three</bullet
            ><p>Four</p></chapter><in/></out>]]></assert-xml>
      </result>
   </test-case>
   
   <test-case name="stream-choose-005">
      <description>Use xsl:if and LREs within xsl:stream, only one branch doing downward selection</description>
      <created by="Michael Kay" on="2012-12-04"/>
      <test>
         <stylesheet file="stream-choose-005.xsl"/>
         <initial-template name="main"/>
      </test>
      <result>
         <assert-xml><![CDATA[<out><in/><chapter><head>Heading</head><p>One</p><p>Two</p><p>Three</p
            ><bullet>point one</bullet><bullet>point two</bullet><bullet>point three</bullet
            ><p>Four</p></chapter><in/></out>]]></assert-xml>
      </result>
   </test-case>
   
   <test-case name="stream-choose-006">
      <description>Streaming, xsl:choose does downward selection within the first condition</description>
      <created by="Michael Kay" on="2012-12-04"/>
      <test>
         <stylesheet file="stream-choose-006.xsl"/>
         <initial-template name="main"/>
      </test>
      <result>
         <assert>/out/magic</assert>
      </result>
   </test-case>
   
   <test-case name="stream-choose-007">
      <description>Streaming, xsl:choose does downward selection within the first condition, returns false</description>
      <created by="Michael Kay" on="2012-12-04"/>
      <test>
         <stylesheet file="stream-choose-007.xsl"/>
         <initial-template name="main"/>
      </test>
      <result>
         <assert>/out/cool</assert>
      </result>
   </test-case>
   
   <test-case name="stream-choose-008">
      <description>Streaming, xsl:choose using a variety of motionless test conditions</description>
      <created by="Michael Kay" on="2012-12-04"/>
      <test>
         <stylesheet file="stream-choose-008.xsl"/>
         <initial-template name="main"/>
      </test>
      <result>
         <assert-xml><![CDATA[<out><head>Heading</head><para/><para/><para/><bullet>point one</bullet
            ><bullet>point two</bullet><bullet>point three</bullet><para/></out>]]></assert-xml>
      </result>
   </test-case>
   
   <test-case name="stream-for-each-001">
      <description>Use xsl:for-each within xsl:stream</description>
      <created by="Michael Kay" on="2012-12-04"/>
      <test>
         <stylesheet file="stream-for-each-001.xsl"/>
         <initial-template name="main"/>
      </test>
      <result>
         <assert-xml><![CDATA[<out><transaction value="-15.00" date="2006-02-15"
            /><transaction value="-5.00" date="2006-02-20"
            /><transaction value="-2.33" date="2006-02-23"
            /><transaction value="-248.05" date="2006-02-24"/></out>]]></assert-xml>
      </result>
   </test-case>
   
   <test-case name="stream-for-each-002">
      <description>Use xsl:for-each within xsl:stream, with position() numbering</description>
      <created by="Michael Kay" on="2012-12-04"/>
      <test>
         <stylesheet file="stream-for-each-002.xsl"/>
         <initial-template name="main"/>
      </test>
      <result>
         <assert-xml><![CDATA[<out><transaction nr="1" value="-15.00" date="2006-02-15"
            /><transaction nr="2" value="-5.00" date="2006-02-20"
            /><transaction nr="3" value="-2.33" date="2006-02-23"
            /><transaction nr="4" value="-248.05" date="2006-02-24"/></out>]]></assert-xml>
      </result>
   </test-case>
   
   <test-case name="stream-for-each-003">
      <description>Use xsl:for-each within xsl:stream, with positional selection</description>
      <created by="Michael Kay" on="2012-12-04"/>
      <test>
         <stylesheet file="stream-for-each-003.xsl"/>
         <initial-template name="main"/>
      </test>
      <result>
         <assert-xml><![CDATA[<out><transaction nr="1" value="13.24" date="2006-02-13"
            /><transaction nr="2" value="8.12" date="2006-02-13"
            /><transaction nr="3" value="-15.00" date="2006-02-15"
            /><transaction nr="4" value="6.00" date="2006-02-16"/></out>]]></assert-xml>
      </result>
   </test-case>
   
   <test-case name="stream-for-each-004">
      <description>Use xsl:for-each within xsl:stream, attempt multiple downward selections in a loop</description>
      <created by="Michael Kay" on="2012-12-04"/>
      <test>
         <stylesheet file="stream-for-each-004.xsl"/>
         <initial-template name="main"/>
      </test>
      <result>
         <error code="XTSE3430"/>
      </result>
   </test-case>
   
   <test-case name="stream-for-each-005">
      <description>Use xsl:for-each within xsl:stream, attempt multiple downward selections in a loop</description>
      <created by="Michael Kay" on="2012-12-04"/>
      <test>
         <stylesheet file="stream-for-each-005.xsl"/>
         <initial-template name="main"/>
      </test>
      <result>
         <error code="XTSE3430"/>
      </result>
   </test-case>
   
   <test-case name="stream-for-each-006">
      <description>Use xsl:for-each within xsl:stream, //a/b is not guaranteed streamable in the spec, but streamable in Saxon</description>
      <created by="Michael Kay" on="2012-12-04"/>
      <test>
         <stylesheet file="stream-for-each-006.xsl"/>
         <initial-template name="main"/>
      </test>
      <result>
         <assert-xml><![CDATA[<out><title>Pride and Prejudice</title><title>Wuthering Heights</title
            ><title>Tess of the d'Urbervilles</title><title>Jude the Obscure</title
            ><title>The Big Over Easy</title><title>The Eyre Affair</title></out>]]></assert-xml>
      </result>
   </test-case>
   
   
   
   <test-case name="stream-group-001">
      <description>Streamed grouping - group-adjacent - with xsl:sequence</description>
      <created by="Michael Kay" on="2012-11-07"/>
      <test>
         <stylesheet file="stream-group-001.xsl"/>
         <initial-template name="main"/>
      </test>
      <result>
         <all-of>
            <assert>deep-equal(/out/batch[1]/transaction/@value/number(), (13.24, 8.12))</assert>
            <assert>deep-equal(/out/batch[2]/transaction/@value/number(), (-15.00))</assert>
            <assert>deep-equal(/out/batch[3]/transaction/@value/number(), (6.00))</assert>
            <assert>deep-equal(/out/batch[4]/transaction/@value/number(), (0.50, 2.33, 4.44))</assert>
            <assert>deep-equal(/out/batch[5]/transaction/@value/number(), (-5.00))</assert>
            <assert>deep-equal(/out/batch[6]/transaction/@value/number(), (8.99))</assert>
            <assert>deep-equal(/out/batch[7]/transaction/@value/number(), (16.00))</assert>
            <assert>deep-equal(/out/batch[8]/transaction/@value/number(), (-2.33, 5.60, 4.32))</assert>
            <assert>deep-equal(/out/batch[9]/transaction/@value/number(), (6.78, 12.20, -248.05))</assert>
            <assert>deep-equal(/out/batch[10]/transaction/@value/number(), (12.00, 13.99))</assert>
            <assert>deep-equal(/out/batch[11]/transaction/@value/number(), (14.20))</assert>
            <assert>count(/out/batch) = 11</assert>
         </all-of>
      </result>
   </test-case>
   
   <test-case name="stream-group-002">
      <description>Streamed grouping - group-adjacent - with xsl:copy-of</description>
      <created by="Michael Kay" on="2012-11-07"/>
      <test>
         <stylesheet file="stream-group-002.xsl"/>
         <initial-template name="main"/>
      </test>
      <result>
         <all-of>
            <assert>deep-equal(/out/batch[1]/transaction/@value/number(), (13.24, 8.12))</assert>
            <assert>deep-equal(/out/batch[2]/transaction/@value/number(), (-15.00))</assert>
            <assert>deep-equal(/out/batch[3]/transaction/@value/number(), (6.00))</assert>
            <assert>deep-equal(/out/batch[4]/transaction/@value/number(), (0.50, 2.33, 4.44))</assert>
            <assert>deep-equal(/out/batch[5]/transaction/@value/number(), (-5.00))</assert>
            <assert>deep-equal(/out/batch[6]/transaction/@value/number(), (8.99))</assert>
            <assert>deep-equal(/out/batch[7]/transaction/@value/number(), (16.00))</assert>
            <assert>deep-equal(/out/batch[8]/transaction/@value/number(), (-2.33, 5.60, 4.32))</assert>
            <assert>deep-equal(/out/batch[9]/transaction/@value/number(), (6.78, 12.20, -248.05))</assert>
            <assert>deep-equal(/out/batch[10]/transaction/@value/number(), (12.00, 13.99))</assert>
            <assert>deep-equal(/out/batch[11]/transaction/@value/number(), (14.20))</assert>
            <assert>count(/out/batch) = 11</assert>
         </all-of>
      </result>
   </test-case>
   
   <test-case name="stream-group-003">
      <description>Streamed grouping - group-adjacent - with xsl:value-of</description>
      <created by="Michael Kay" on="2012-11-07"/>
      <test>
         <stylesheet file="stream-group-003.xsl"/>
         <initial-template name="main"/>
      </test>
      <result>
         <all-of>
            <assert>/out/batch[1][@date = "2006-02-13"] = "13.24 8.12"</assert>
            <assert>/out/batch[2][@date = "2006-02-15"] = "-15.00"</assert>
            <assert>/out/batch[3][@date = "2006-02-16"] = "6.00"</assert>
            <assert>/out/batch[4][@date = "2006-02-17"] = "0.50 2.33 4.44"</assert>
            <assert>/out/batch[5][@date = "2006-02-20"] = "-5.00"</assert>
            <assert>/out/batch[6][@date = "2006-02-21"] = "8.99"</assert>
            <assert>/out/batch[7][@date = "2006-02-22"] = "16.00"</assert>
            <assert>/out/batch[8][@date = "2006-02-23"] = "-2.33 5.60 4.32"</assert>
            <assert>/out/batch[9][@date = "2006-02-24"] = "6.78 12.20 -248.05"</assert>
            <assert>/out/batch[10][@date = "2006-02-25"] = "12.00 13.99"</assert>
            <assert>/out/batch[11][@date = "2006-02-26"] = "14.20"</assert>           
         </all-of>
      </result>
   </test-case>
   
   <test-case name="stream-group-004">
      <description>Streamed grouping - group-adjacent - with AVT</description>
      <created by="Michael Kay" on="2012-11-07"/>
      <test>
         <stylesheet file="stream-group-004.xsl"/>
         <initial-template name="main"/>
      </test>
      <result>
         <all-of>
            <assert>/out/batch[1][@date = "2006-02-13"]/transactions/@amounts = "13.24 8.12"</assert>
            <assert>/out/batch[2][@date = "2006-02-15"]/transactions/@amounts = "-15.00"</assert>
            <assert>/out/batch[3][@date = "2006-02-16"]/transactions/@amounts = "6.00"</assert>
            <assert>/out/batch[4][@date = "2006-02-17"]/transactions/@amounts = "0.50 2.33 4.44"</assert>
            <assert>/out/batch[5][@date = "2006-02-20"]/transactions/@amounts = "-5.00"</assert>
            <assert>/out/batch[6][@date = "2006-02-21"]/transactions/@amounts = "8.99"</assert>
            <assert>/out/batch[7][@date = "2006-02-22"]/transactions/@amounts = "16.00"</assert>
            <assert>/out/batch[8][@date = "2006-02-23"]/transactions/@amounts = "-2.33 5.60 4.32"</assert>
            <assert>/out/batch[9][@date = "2006-02-24"]/transactions/@amounts = "6.78 12.20 -248.05"</assert>
            <assert>/out/batch[10][@date = "2006-02-25"]/transactions/@amounts = "12.00 13.99"</assert>
            <assert>/out/batch[11][@date = "2006-02-26"]/transactions/@amounts = "14.20"</assert>           
         </all-of>
      </result>
   </test-case>
   
   <test-case name="stream-group-005">
      <description>Streamed grouping - group-adjacent - with count()</description>
      <created by="Michael Kay" on="2012-11-07"/>
      <test>
         <stylesheet file="stream-group-005.xsl"/>
         <initial-template name="main"/>
      </test>
      <result>
         <all-of>
            <assert>/out/batch[1][@date = "2006-02-13"]/size = "2"</assert>
            <assert>/out/batch[2][@date = "2006-02-15"]/size = "1"</assert>
            <assert>/out/batch[3][@date = "2006-02-16"]/size = "1"</assert>
            <assert>/out/batch[4][@date = "2006-02-17"]/size = "3"</assert>
            <assert>/out/batch[5][@date = "2006-02-20"]/size = "1"</assert>
            <assert>/out/batch[6][@date = "2006-02-21"]/size = "1"</assert>
            <assert>/out/batch[7][@date = "2006-02-22"]/size = "1"</assert>
            <assert>/out/batch[8][@date = "2006-02-23"]/size = "3"</assert>
            <assert>/out/batch[9][@date = "2006-02-24"]/size = "3"</assert>
            <assert>/out/batch[10][@date = "2006-02-25"]/size = "2"</assert>
            <assert>/out/batch[11][@date = "2006-02-26"]/size = "1"</assert>           
         </all-of>
      </result>
   </test-case>
   
   <test-case name="stream-group-006">
      <description>Streamed grouping - group-adjacent - with sum()</description>
      <created by="Michael Kay" on="2012-11-07"/>
      <test>
         <stylesheet file="stream-group-006.xsl"/>
         <initial-template name="main"/>
      </test>
      <result>
         <all-of>
            <assert>/out/batch[1][@date = "2006-02-13"]/total = "21.36"</assert>
            <assert>/out/batch[2][@date = "2006-02-15"]/total = "6.36"</assert>
            <assert>/out/batch[3][@date = "2006-02-16"]/total = "12.36"</assert>
            <assert>/out/batch[4][@date = "2006-02-17"]/total = "19.63"</assert>
            <assert>/out/batch[5][@date = "2006-02-20"]/total = "14.63"</assert>
            <assert>/out/batch[6][@date = "2006-02-21"]/total = "23.62"</assert>
            <assert>/out/batch[7][@date = "2006-02-22"]/total = "39.62"</assert>
            <assert>/out/batch[8][@date = "2006-02-23"]/total = "47.21"</assert>
            <assert>/out/batch[9][@date = "2006-02-24"]/total = "-181.86"</assert>
            <assert>/out/batch[10][@date = "2006-02-25"]/total = "-155.87"</assert>
            <assert>/out/batch[11][@date = "2006-02-26"]/total = "-141.67"</assert>           
         </all-of>
      </result>
   </test-case>
   
   <test-case name="stream-group-007">
      <description>Streamed grouping - group-adjacent - composite grouping key</description>
      <created by="Michael Kay" on="2012-12-04"/>
      <test>
         <stylesheet file="stream-group-007.xsl"/>
         <initial-template name="main"/>
      </test>
      <result>
         <assert-xml><![CDATA[<out><batch year="2006" week="7"><total>19.63</total></batch><batch year="2006" week="8"><total>-141.67</total></batch></out>]]></assert-xml>
      </result>
   </test-case>
   
   <test-case name="stream-group-008">
      <description>Streamed grouping - group-adjacent - composite grouping key - min and max using xsl:iterate</description>
      <created by="Michael Kay" on="2012-12-04"/>
      <test>
         <stylesheet file="stream-group-008.xsl"/>
         <initial-template name="main"/>
      </test>
      <result>
         <assert-xml><![CDATA[<out><batch year="2006" week="7"><min>-15</min><max>13.24</max></batch><batch year="2006" week="8"><min>-248.05</min><max>16</max></batch></out>]]></assert-xml>
      </result>
   </test-case>
   
   <test-case name="stream-group-009">
      <description>Streamed grouping - group-adjacent - composite grouping key - classic "adjacent bullets" use case</description>
      <created by="Michael Kay" on="2012-12-04"/>
      <test>
         <stylesheet file="stream-group-009.xsl"/>
         <initial-template name="main"/>
      </test>
      <result>
         <assert>false()</assert> <!-- not currently working in Saxon -->
      </result>
   </test-case>
   
   <test-case name="stream-group-010">
      <description>Streamed grouping - group-adjacent - multi-level grouping</description>
      <created by="Michael Kay" on="2012-12-04"/>
      <test>
         <stylesheet file="stream-group-010.xsl"/>
         <initial-template name="main"/>
      </test>
      <result>
         <assert>false()</assert>
      </result>
   </test-case>
   
   <test-case name="stream-group-011">
      <description>Streamed grouping - group-adjacent - with xsl:apply-templates selecting the current group</description>
      <created by="Michael Kay" on="2013-03-26"/>
      <test>
         <stylesheet file="stream-group-011.xsl"/>
         <initial-template name="main"/>
      </test>
      <result>
         <all-of>
            <assert>/out/batch[1][@date = "2006-02-13"] = "[13.24][8.12]"</assert>
            <assert>/out/batch[2][@date = "2006-02-15"] = "[-15.00]"</assert>
            <assert>/out/batch[3][@date = "2006-02-16"] = "[6.00]"</assert>
            <assert>/out/batch[4][@date = "2006-02-17"] = "[0.50][2.33][4.44]"</assert>
            <assert>/out/batch[5][@date = "2006-02-20"] = "[-5.00]"</assert>
            <assert>/out/batch[6][@date = "2006-02-21"] = "[8.99]"</assert>
            <assert>/out/batch[7][@date = "2006-02-22"] = "[16.00]"</assert>
            <assert>/out/batch[8][@date = "2006-02-23"] = "[-2.33][5.60][4.32]"</assert>
            <assert>/out/batch[9][@date = "2006-02-24"] = "[6.78][12.20][-248.05]"</assert>
            <assert>/out/batch[10][@date = "2006-02-25"] = "[12.00][13.99]"</assert>
            <assert>/out/batch[11][@date = "2006-02-26"] = "[14.20]"</assert>           
         </all-of>
      </result>
   </test-case>
   
   <test-case name="stream-group-012">
      <description>Streamed grouping - group-adjacent - with xsl:for-each selecting the current group</description>
      <created by="Michael Kay" on="2013-03-26"/>
      <test>
         <stylesheet file="stream-group-012.xsl"/>
         <initial-template name="main"/>
      </test>
      <result>
         <all-of>
            <assert>/out/batch[1][@date = "2006-02-13"] = "[13.24][8.12]"</assert>
            <assert>/out/batch[2][@date = "2006-02-15"] = "[-15.00]"</assert>
            <assert>/out/batch[3][@date = "2006-02-16"] = "[6.00]"</assert>
            <assert>/out/batch[4][@date = "2006-02-17"] = "[0.50][2.33][4.44]"</assert>
            <assert>/out/batch[5][@date = "2006-02-20"] = "[-5.00]"</assert>
            <assert>/out/batch[6][@date = "2006-02-21"] = "[8.99]"</assert>
            <assert>/out/batch[7][@date = "2006-02-22"] = "[16.00]"</assert>
            <assert>/out/batch[8][@date = "2006-02-23"] = "[-2.33][5.60][4.32]"</assert>
            <assert>/out/batch[9][@date = "2006-02-24"] = "[6.78][12.20][-248.05]"</assert>
            <assert>/out/batch[10][@date = "2006-02-25"] = "[12.00][13.99]"</assert>
            <assert>/out/batch[11][@date = "2006-02-26"] = "[14.20]"</assert>           
         </all-of>
      </result>
   </test-case>
   
   <test-case name="stream-group-013">
      <description>Streamed grouping - group-adjacent - composite grouping key - min and max using xsl:iterate 
      with position() and xsl:break</description>
      <created by="Michael Kay" on="2013-03-29"/>
      <test>
         <stylesheet file="stream-group-013.xsl"/>
         <initial-template name="main"/>
      </test>
      <result>
         <assert-xml><![CDATA[<out><batch year="2006" week="7"><min>8.12</min><max>13.24</max></batch><batch year="2006" week="8"><min>-5</min><max>8.99</max></batch></out>]]></assert-xml>
      </result>
   </test-case>
   
   <test-case name="stream-group-014">
      <description>Streamed grouping - group-adjacent - as a direct child of xsl:stream</description>
      <created by="Michael Kay" on="2013-03-29"/>
      <test>
         <stylesheet file="stream-group-014.xsl"/>
         <initial-template name="main"/>
      </test>
      <result>
         <assert-xml><![CDATA[<out><batch year="2006" week="7"><total>19.63</total></batch><batch year="2006" week="8"><total>-141.67</total></batch></out>]]></assert-xml>
      </result>
   </test-case>
   
   <test-case name="stream-group-015">
      <description>Streamed grouping - group-adjacent - with xsl:sequence;
        using only the first item in every group</description>
      <created by="Michael Kay" on="2013-03-29"/>
      <test>
         <stylesheet file="stream-group-015.xsl"/>
         <initial-template name="main"/>
      </test>
      <result>
         <all-of>
            <assert>deep-equal(/out/first[1]/transaction/@value/number(), (13.24))</assert>
            <assert>deep-equal(/out/first[2]/transaction/@value/number(), (-15.00))</assert>
            <assert>deep-equal(/out/first[3]/transaction/@value/number(), (6.00))</assert>
            <assert>deep-equal(/out/first[4]/transaction/@value/number(), (0.50))</assert>
            <assert>deep-equal(/out/first[5]/transaction/@value/number(), (-5.00))</assert>
            <assert>deep-equal(/out/first[6]/transaction/@value/number(), (8.99))</assert>
            <assert>deep-equal(/out/first[7]/transaction/@value/number(), (16.00))</assert>
            <assert>deep-equal(/out/first[8]/transaction/@value/number(), (-2.33))</assert>
            <assert>deep-equal(/out/first[9]/transaction/@value/number(), (6.78))</assert>
            <assert>deep-equal(/out/first[10]/transaction/@value/number(), (12.00))</assert>
            <assert>deep-equal(/out/first[11]/transaction/@value/number(), (14.20))</assert>
            <assert>count(/out/first) = 11</assert>
         </all-of>
      </result>
   </test-case>
   
   <test-case name="stream-group-016">
      <description>Streamed grouping - group-adjacent - with xsl:sequence;
        using only the first item in every group</description>
      <created by="Michael Kay" on="2013-03-29"/>
      <test>
         <stylesheet file="stream-group-016.xsl"/>
         <initial-template name="main"/>
      </test>
      <result>
         <all-of>
            <assert>deep-equal(/out/first[1]/transaction/@value/number(), (13.24))</assert>
            <assert>deep-equal(/out/first[2]/transaction/@value/number(), (-15.00))</assert>
            <assert>deep-equal(/out/first[3]/transaction/@value/number(), (6.00))</assert>
            <assert>deep-equal(/out/first[4]/transaction/@value/number(), (0.50))</assert>
            <assert>deep-equal(/out/first[5]/transaction/@value/number(), (-5.00))</assert>
            <assert>deep-equal(/out/first[6]/transaction/@value/number(), (8.99))</assert>
            <assert>deep-equal(/out/first[7]/transaction/@value/number(), (16.00))</assert>
            <assert>deep-equal(/out/first[8]/transaction/@value/number(), (-2.33))</assert>
            <assert>deep-equal(/out/first[9]/transaction/@value/number(), (6.78))</assert>
            <assert>deep-equal(/out/first[10]/transaction/@value/number(), (12.00))</assert>
            <assert>deep-equal(/out/first[11]/transaction/@value/number(), (14.20))</assert>
            <assert>count(/out/first) = 11</assert>
         </all-of>
      </result>
   </test-case>
   
   <test-case name="stream-group-017">
      <description>Streamed grouping - group-adjacent - non-streamable because there
        are two references to the grouping variable</description>
      <created by="Michael Kay" on="2013-03-29"/>
      <test>
         <stylesheet file="stream-group-017.xsl"/>
         <initial-template name="main"/>
      </test>
      <result>
         <error code="XTSE3430"/>
      </result>
   </test-case>
   
      <test-case name="stream-group-018">
      <description>Streamed grouping - group-adjacent - using position() to number groups</description>
      <created by="Michael Kay" on="2013-03-29"/>
      <test>
         <stylesheet file="stream-group-018.xsl"/>
         <initial-template name="main"/>
      </test>
      <result>
         <all-of>
            <assert>/out/batch[1][@date="2006-02-13" and @nr="1" and @size="2"]</assert>
            <assert>/out/batch[2][@date="2006-02-15" and @nr="2" and @size="1"]</assert>
            <assert>/out/batch[3][@date="2006-02-16" and @nr="3" and @size="1"]</assert>
            <assert>/out/batch[4][@date="2006-02-17" and @nr="4" and @size="3"]</assert>
         </all-of>
      </result>
   </test-case>
   
   <test-case name="stream-group-101">
      <description>Streamed grouping - group-starting-with </description>
      <created by="Michael Kay" on="2012-12-04"/>
      <test>
         <stylesheet file="stream-group-101.xsl"/>
         <initial-template name="main"/>
      </test>
      <result>
         <all-of>
            <assert>deep-equal(/out/batch[1]/transaction/@value/xs:decimal(.), (13.24, 8.12))</assert>
            <assert>deep-equal(/out/batch[2]/transaction/@value/xs:decimal(.), (-15.00, 6.00, 0.50, 2.33, 4.44))</assert>
            <assert>deep-equal(/out/batch[3]/transaction/@value/xs:decimal(.), (-5.00, 8.99, 16.00))</assert>
            <assert>deep-equal(/out/batch[4]/transaction/@value/xs:decimal(.), (-2.33, 5.60, 4.32, 6.78, 12.20))</assert>
            <assert>deep-equal(/out/batch[5]/transaction/@value/xs:decimal(.), (-248.05, 12.00, 13.99, 14.20))</assert>
         </all-of>
      </result>
   </test-case>
   
   <test-case name="stream-group-102">
      <description>Streamed grouping - group-starting-with - extracting the first item in the group</description>
      <created by="Michael Kay" on="2012-12-04"/>
      <test>
         <stylesheet file="stream-group-102.xsl"/>
         <initial-template name="main"/>
      </test>
      <result>
         <all-of>
            <assert>deep-equal(/out/batch[1]/transaction/@value/xs:decimal(.), (13.24))</assert>
            <assert>deep-equal(/out/batch[2]/transaction/@value/xs:decimal(.), (-15.00))</assert>
            <assert>deep-equal(/out/batch[3]/transaction/@value/xs:decimal(.), (-5.00))</assert>
            <assert>deep-equal(/out/batch[4]/transaction/@value/xs:decimal(.), (-2.33))</assert>
            <assert>deep-equal(/out/batch[5]/transaction/@value/xs:decimal(.), (-248.05))</assert>
         </all-of>
      </result>
   </test-case>
   
   <test-case name="stream-group-201">
      <description>Streamed grouping - group-ending-with </description>
      <created by="Michael Kay" on="2012-12-04"/>
      <test>
         <stylesheet file="stream-group-201.xsl"/>
         <initial-template name="main"/>
      </test>
      <result>
         <all-of>
            <assert>deep-equal(/out/batch[1]/transaction/@value/xs:decimal(.), (13.24, 8.12, -15.00))</assert>
            <assert>deep-equal(/out/batch[2]/transaction/@value/xs:decimal(.), (6.00, 0.50, 2.33, 4.44, -5.00))</assert>
            <assert>deep-equal(/out/batch[3]/transaction/@value/xs:decimal(.), (8.99, 16.00, -2.33))</assert>
            <assert>deep-equal(/out/batch[4]/transaction/@value/xs:decimal(.), (5.60, 4.32, 6.78, 12.20, -248.05))</assert>
            <assert>deep-equal(/out/batch[5]/transaction/@value/xs:decimal(.), (12.00, 13.99, 14.20))</assert>
         </all-of>
      </result>
   </test-case>
   
   <test-case name="stream-group-202">
      <description>Streamed grouping - group-ending-with - extracting the first item in the group</description>
      <created by="Michael Kay" on="2012-12-04"/>
      <test>
         <stylesheet file="stream-group-202.xsl"/>
         <initial-template name="main"/>
      </test>
      <result>
         <all-of>
            <assert>deep-equal(/out/batch[1]/transaction/@value/xs:decimal(.), (13.24))</assert>
            <assert>deep-equal(/out/batch[2]/transaction/@value/xs:decimal(.), (6.00))</assert>
            <assert>deep-equal(/out/batch[3]/transaction/@value/xs:decimal(.), (8.99))</assert>
            <assert>deep-equal(/out/batch[4]/transaction/@value/xs:decimal(.), (5.60))</assert>
            <assert>deep-equal(/out/batch[5]/transaction/@value/xs:decimal(.), (12.00))</assert>
         </all-of>
      </result>
   </test-case>
   
   
   <test-case name="stream-result-document-001">
      <description>Streaming - calling xsl:result-document - motionless content</description>
      <created by="Michael Kay" on="2013-06-15"/>
      <test>
         <stylesheet file="stream-result-document-001.xsl"/>
         <initial-template name="main"/>
      </test>
      <result>
         <assert-result-document uri="76543210.xml">
               <assert-xml><![CDATA[<root>account</root>]]></assert-xml>
         </assert-result-document>
      </result>
   </test-case>

</test-set>
